# Autogenerated by chatgpt :)
CC := g++
CFLAGS := -Wall -std=c++17
LDFLAGS := -L./build -lhttpclient
INCLUDE_DIR := ./lib

SRC_DIR := ./lib
BUILD_DIR := ./build
BIN_DIR := ./bin
EXAMPLES_DIR := ./testing

# List your source files for the library
LIB_SRCS := $(wildcard $(SRC_DIR)/*.c)
LIB_OBJS := $(patsubst $(SRC_DIR)/%.cpp,$(BUILD_DIR)/%.o,$(LIB_SRCS))

# Define the library target
LIB_TARGET := $(BUILD_DIR)/libhttpclient.so

# List your example source files
EXAMPLE_SRCS := $(wildcard $(EXAMPLES_DIR)/*.cpp)
EXAMPLE_BINS := $(patsubst $(EXAMPLES_DIR)/%.cpp,$(BIN_DIR)/%,$(EXAMPLE_SRCS))

.PHONY: all clean

all: $(LIB_TARGET) $(EXAMPLE_BINS)

# Rule to build library objects
$(BUILD_DIR)/%.o: $(SRC_DIR)/%.cpp
	@mkdir -p $(@D)
	$(CC) $(CFLAGS) -I$(INCLUDE_DIR) -c $< -o $@

# Rule to build the library
$(LIB_TARGET): $(LIB_OBJS)
	$(CC) $(CFLAGS) -shared -o $@ $^

# Rule to build each test/example binary
$(BIN_DIR)/%: $(EXAMPLES_DIR)/%.cpp $(LIB_TARGET)
	@mkdir -p $(@D)
	$(CC) $(CFLAGS) -I$(INCLUDE_DIR) $< $(LDFLAGS) -o $@

clean:
	rm -rf $(BUILD_DIR)/* $(BIN_DIR)/*

lint:
	clang-format -i testing/*.cpp lib/*
